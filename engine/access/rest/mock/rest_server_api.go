// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	models "github.com/onflow/flow-go/engine/access/rest/models"

	request "github.com/onflow/flow-go/engine/access/rest/request"
)

// RestServerApi is an autogenerated mock type for the RestServerApi type
type RestServerApi struct {
	mock.Mock
}

// CreateTransaction provides a mock function with given fields: r, _a1, link
func (_m *RestServerApi) CreateTransaction(r request.CreateTransaction, _a1 context.Context, link models.LinkGenerator) (models.Transaction, error) {
	ret := _m.Called(r, _a1, link)

	var r0 models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(request.CreateTransaction, context.Context, models.LinkGenerator) (models.Transaction, error)); ok {
		return rf(r, _a1, link)
	}
	if rf, ok := ret.Get(0).(func(request.CreateTransaction, context.Context, models.LinkGenerator) models.Transaction); ok {
		r0 = rf(r, _a1, link)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	if rf, ok := ret.Get(1).(func(request.CreateTransaction, context.Context, models.LinkGenerator) error); ok {
		r1 = rf(r, _a1, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteScript provides a mock function with given fields: r, _a1, link
func (_m *RestServerApi) ExecuteScript(r request.GetScript, _a1 context.Context, link models.LinkGenerator) ([]byte, error) {
	ret := _m.Called(r, _a1, link)

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(request.GetScript, context.Context, models.LinkGenerator) ([]byte, error)); ok {
		return rf(r, _a1, link)
	}
	if rf, ok := ret.Get(0).(func(request.GetScript, context.Context, models.LinkGenerator) []byte); ok {
		r0 = rf(r, _a1, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(request.GetScript, context.Context, models.LinkGenerator) error); ok {
		r1 = rf(r, _a1, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: r, _a1, expandFields, link
func (_m *RestServerApi) GetAccount(r request.GetAccount, _a1 context.Context, expandFields map[string]bool, link models.LinkGenerator) (models.Account, error) {
	ret := _m.Called(r, _a1, expandFields, link)

	var r0 models.Account
	var r1 error
	if rf, ok := ret.Get(0).(func(request.GetAccount, context.Context, map[string]bool, models.LinkGenerator) (models.Account, error)); ok {
		return rf(r, _a1, expandFields, link)
	}
	if rf, ok := ret.Get(0).(func(request.GetAccount, context.Context, map[string]bool, models.LinkGenerator) models.Account); ok {
		r0 = rf(r, _a1, expandFields, link)
	} else {
		r0 = ret.Get(0).(models.Account)
	}

	if rf, ok := ret.Get(1).(func(request.GetAccount, context.Context, map[string]bool, models.LinkGenerator) error); ok {
		r1 = rf(r, _a1, expandFields, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockPayloadByID provides a mock function with given fields: r, _a1, link
func (_m *RestServerApi) GetBlockPayloadByID(r request.GetBlockPayload, _a1 context.Context, link models.LinkGenerator) (models.BlockPayload, error) {
	ret := _m.Called(r, _a1, link)

	var r0 models.BlockPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(request.GetBlockPayload, context.Context, models.LinkGenerator) (models.BlockPayload, error)); ok {
		return rf(r, _a1, link)
	}
	if rf, ok := ret.Get(0).(func(request.GetBlockPayload, context.Context, models.LinkGenerator) models.BlockPayload); ok {
		r0 = rf(r, _a1, link)
	} else {
		r0 = ret.Get(0).(models.BlockPayload)
	}

	if rf, ok := ret.Get(1).(func(request.GetBlockPayload, context.Context, models.LinkGenerator) error); ok {
		r1 = rf(r, _a1, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlocksByHeight provides a mock function with given fields: r, link
func (_m *RestServerApi) GetBlocksByHeight(r *request.Request, link models.LinkGenerator) ([]*models.Block, error) {
	ret := _m.Called(r, link)

	var r0 []*models.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(*request.Request, models.LinkGenerator) ([]*models.Block, error)); ok {
		return rf(r, link)
	}
	if rf, ok := ret.Get(0).(func(*request.Request, models.LinkGenerator) []*models.Block); ok {
		r0 = rf(r, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(*request.Request, models.LinkGenerator) error); ok {
		r1 = rf(r, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlocksByIDs provides a mock function with given fields: r, _a1, expandFields, link
func (_m *RestServerApi) GetBlocksByIDs(r request.GetBlockByIDs, _a1 context.Context, expandFields map[string]bool, link models.LinkGenerator) ([]*models.Block, error) {
	ret := _m.Called(r, _a1, expandFields, link)

	var r0 []*models.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(request.GetBlockByIDs, context.Context, map[string]bool, models.LinkGenerator) ([]*models.Block, error)); ok {
		return rf(r, _a1, expandFields, link)
	}
	if rf, ok := ret.Get(0).(func(request.GetBlockByIDs, context.Context, map[string]bool, models.LinkGenerator) []*models.Block); ok {
		r0 = rf(r, _a1, expandFields, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(request.GetBlockByIDs, context.Context, map[string]bool, models.LinkGenerator) error); ok {
		r1 = rf(r, _a1, expandFields, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCollectionByID provides a mock function with given fields: r, _a1, expandFields, link, chain
func (_m *RestServerApi) GetCollectionByID(r request.GetCollection, _a1 context.Context, expandFields map[string]bool, link models.LinkGenerator, chain flow.Chain) (models.Collection, error) {
	ret := _m.Called(r, _a1, expandFields, link, chain)

	var r0 models.Collection
	var r1 error
	if rf, ok := ret.Get(0).(func(request.GetCollection, context.Context, map[string]bool, models.LinkGenerator, flow.Chain) (models.Collection, error)); ok {
		return rf(r, _a1, expandFields, link, chain)
	}
	if rf, ok := ret.Get(0).(func(request.GetCollection, context.Context, map[string]bool, models.LinkGenerator, flow.Chain) models.Collection); ok {
		r0 = rf(r, _a1, expandFields, link, chain)
	} else {
		r0 = ret.Get(0).(models.Collection)
	}

	if rf, ok := ret.Get(1).(func(request.GetCollection, context.Context, map[string]bool, models.LinkGenerator, flow.Chain) error); ok {
		r1 = rf(r, _a1, expandFields, link, chain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEvents provides a mock function with given fields: r, _a1
func (_m *RestServerApi) GetEvents(r request.GetEvents, _a1 context.Context) (models.BlocksEvents, error) {
	ret := _m.Called(r, _a1)

	var r0 models.BlocksEvents
	var r1 error
	if rf, ok := ret.Get(0).(func(request.GetEvents, context.Context) (models.BlocksEvents, error)); ok {
		return rf(r, _a1)
	}
	if rf, ok := ret.Get(0).(func(request.GetEvents, context.Context) models.BlocksEvents); ok {
		r0 = rf(r, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(models.BlocksEvents)
		}
	}

	if rf, ok := ret.Get(1).(func(request.GetEvents, context.Context) error); ok {
		r1 = rf(r, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutionResultByID provides a mock function with given fields: r, _a1, link
func (_m *RestServerApi) GetExecutionResultByID(r request.GetExecutionResult, _a1 context.Context, link models.LinkGenerator) (models.ExecutionResult, error) {
	ret := _m.Called(r, _a1, link)

	var r0 models.ExecutionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(request.GetExecutionResult, context.Context, models.LinkGenerator) (models.ExecutionResult, error)); ok {
		return rf(r, _a1, link)
	}
	if rf, ok := ret.Get(0).(func(request.GetExecutionResult, context.Context, models.LinkGenerator) models.ExecutionResult); ok {
		r0 = rf(r, _a1, link)
	} else {
		r0 = ret.Get(0).(models.ExecutionResult)
	}

	if rf, ok := ret.Get(1).(func(request.GetExecutionResult, context.Context, models.LinkGenerator) error); ok {
		r1 = rf(r, _a1, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutionResultsByBlockIDs provides a mock function with given fields: r, _a1, link
func (_m *RestServerApi) GetExecutionResultsByBlockIDs(r request.GetExecutionResultByBlockIDs, _a1 context.Context, link models.LinkGenerator) ([]models.ExecutionResult, error) {
	ret := _m.Called(r, _a1, link)

	var r0 []models.ExecutionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(request.GetExecutionResultByBlockIDs, context.Context, models.LinkGenerator) ([]models.ExecutionResult, error)); ok {
		return rf(r, _a1, link)
	}
	if rf, ok := ret.Get(0).(func(request.GetExecutionResultByBlockIDs, context.Context, models.LinkGenerator) []models.ExecutionResult); ok {
		r0 = rf(r, _a1, link)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ExecutionResult)
		}
	}

	if rf, ok := ret.Get(1).(func(request.GetExecutionResultByBlockIDs, context.Context, models.LinkGenerator) error); ok {
		r1 = rf(r, _a1, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkParameters provides a mock function with given fields: r
func (_m *RestServerApi) GetNetworkParameters(r *request.Request) (models.NetworkParameters, error) {
	ret := _m.Called(r)

	var r0 models.NetworkParameters
	var r1 error
	if rf, ok := ret.Get(0).(func(*request.Request) (models.NetworkParameters, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*request.Request) models.NetworkParameters); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(models.NetworkParameters)
	}

	if rf, ok := ret.Get(1).(func(*request.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeVersionInfo provides a mock function with given fields: r
func (_m *RestServerApi) GetNodeVersionInfo(r *request.Request) (models.NodeVersionInfo, error) {
	ret := _m.Called(r)

	var r0 models.NodeVersionInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(*request.Request) (models.NodeVersionInfo, error)); ok {
		return rf(r)
	}
	if rf, ok := ret.Get(0).(func(*request.Request) models.NodeVersionInfo); ok {
		r0 = rf(r)
	} else {
		r0 = ret.Get(0).(models.NodeVersionInfo)
	}

	if rf, ok := ret.Get(1).(func(*request.Request) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionByID provides a mock function with given fields: r, _a1, link, chain
func (_m *RestServerApi) GetTransactionByID(r request.GetTransaction, _a1 context.Context, link models.LinkGenerator, chain flow.Chain) (models.Transaction, error) {
	ret := _m.Called(r, _a1, link, chain)

	var r0 models.Transaction
	var r1 error
	if rf, ok := ret.Get(0).(func(request.GetTransaction, context.Context, models.LinkGenerator, flow.Chain) (models.Transaction, error)); ok {
		return rf(r, _a1, link, chain)
	}
	if rf, ok := ret.Get(0).(func(request.GetTransaction, context.Context, models.LinkGenerator, flow.Chain) models.Transaction); ok {
		r0 = rf(r, _a1, link, chain)
	} else {
		r0 = ret.Get(0).(models.Transaction)
	}

	if rf, ok := ret.Get(1).(func(request.GetTransaction, context.Context, models.LinkGenerator, flow.Chain) error); ok {
		r1 = rf(r, _a1, link, chain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionResultByID provides a mock function with given fields: r, _a1, link
func (_m *RestServerApi) GetTransactionResultByID(r request.GetTransactionResult, _a1 context.Context, link models.LinkGenerator) (models.TransactionResult, error) {
	ret := _m.Called(r, _a1, link)

	var r0 models.TransactionResult
	var r1 error
	if rf, ok := ret.Get(0).(func(request.GetTransactionResult, context.Context, models.LinkGenerator) (models.TransactionResult, error)); ok {
		return rf(r, _a1, link)
	}
	if rf, ok := ret.Get(0).(func(request.GetTransactionResult, context.Context, models.LinkGenerator) models.TransactionResult); ok {
		r0 = rf(r, _a1, link)
	} else {
		r0 = ret.Get(0).(models.TransactionResult)
	}

	if rf, ok := ret.Get(1).(func(request.GetTransactionResult, context.Context, models.LinkGenerator) error); ok {
		r1 = rf(r, _a1, link)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRestServerApi interface {
	mock.TestingT
	Cleanup(func())
}

// NewRestServerApi creates a new instance of RestServerApi. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRestServerApi(t mockConstructorTestingTNewRestServerApi) *RestServerApi {
	mock := &RestServerApi{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
