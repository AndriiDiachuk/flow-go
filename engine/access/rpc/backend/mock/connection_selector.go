// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	context "context"

	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// ConnectionSelector is an autogenerated mock type for the ConnectionSelector type
type ConnectionSelector struct {
	mock.Mock
}

// GetCollectionNodes provides a mock function with given fields: txID
func (_m *ConnectionSelector) GetCollectionNodes(txID flow.Identifier) ([]string, error) {
	ret := _m.Called(txID)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier) ([]string, error)); ok {
		return rf(txID)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier) []string); ok {
		r0 = rf(txID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier) error); ok {
		r1 = rf(txID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExecutionNodesForBlockID provides a mock function with given fields: ctx, blockID
func (_m *ConnectionSelector) GetExecutionNodesForBlockID(ctx context.Context, blockID flow.Identifier) (flow.IdentityList, error) {
	ret := _m.Called(ctx, blockID)

	var r0 flow.IdentityList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) (flow.IdentityList, error)); ok {
		return rf(ctx, blockID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, flow.Identifier) flow.IdentityList); ok {
		r0 = rf(ctx, blockID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(flow.IdentityList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, flow.Identifier) error); ok {
		r1 = rf(ctx, blockID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewConnectionSelector interface {
	mock.TestingT
	Cleanup(func())
}

// NewConnectionSelector creates a new instance of ConnectionSelector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnectionSelector(t mockConstructorTestingTNewConnectionSelector) *ConnectionSelector {
	mock := &ConnectionSelector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
