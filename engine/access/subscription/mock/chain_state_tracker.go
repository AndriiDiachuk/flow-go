// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// ChainStateTracker is an autogenerated mock type for the ChainStateTracker type
type ChainStateTracker struct {
	mock.Mock
}

// GetHighestHeight provides a mock function with given fields: blockStatus
func (_m *ChainStateTracker) GetHighestHeight(blockStatus flow.BlockStatus) (uint64, error) {
	ret := _m.Called(blockStatus)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.BlockStatus) (uint64, error)); ok {
		return rf(blockStatus)
	}
	if rf, ok := ret.Get(0).(func(flow.BlockStatus) uint64); ok {
		r0 = rf(blockStatus)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(flow.BlockStatus) error); ok {
		r1 = rf(blockStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStartHeight provides a mock function with given fields: startBlockID, startHeight, blockStatus
func (_m *ChainStateTracker) GetStartHeight(startBlockID flow.Identifier, startHeight uint64, blockStatus flow.BlockStatus) (uint64, error) {
	ret := _m.Called(startBlockID, startHeight, blockStatus)

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint64, flow.BlockStatus) (uint64, error)); ok {
		return rf(startBlockID, startHeight, blockStatus)
	}
	if rf, ok := ret.Get(0).(func(flow.Identifier, uint64, flow.BlockStatus) uint64); ok {
		r0 = rf(startBlockID, startHeight, blockStatus)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(flow.Identifier, uint64, flow.BlockStatus) error); ok {
		r1 = rf(startBlockID, startHeight, blockStatus)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProcessOnFinalizedBlock provides a mock function with given fields:
func (_m *ChainStateTracker) ProcessOnFinalizedBlock() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewChainStateTracker interface {
	mock.TestingT
	Cleanup(func())
}

// NewChainStateTracker creates a new instance of ChainStateTracker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewChainStateTracker(t mockConstructorTestingTNewChainStateTracker) *ChainStateTracker {
	mock := &ChainStateTracker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
