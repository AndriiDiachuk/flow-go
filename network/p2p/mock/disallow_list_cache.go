// Code generated by mockery v2.21.4. DO NOT EDIT.

package mockp2p

import (
	network "github.com/onflow/flow-go/network"
	mock "github.com/stretchr/testify/mock"

	peer "github.com/libp2p/go-libp2p/core/peer"
)

// DisallowListCache is an autogenerated mock type for the DisallowListCache type
type DisallowListCache struct {
	mock.Mock
}

// AllowFor provides a mock function with given fields: peerID, cause
func (_m *DisallowListCache) AllowFor(peerID peer.ID, cause network.DisallowListedCause) []network.DisallowListedCause {
	ret := _m.Called(peerID, cause)

	var r0 []network.DisallowListedCause
	if rf, ok := ret.Get(0).(func(peer.ID, network.DisallowListedCause) []network.DisallowListedCause); ok {
		r0 = rf(peerID, cause)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.DisallowListedCause)
		}
	}

	return r0
}

// DisallowFor provides a mock function with given fields: peerID, cause
func (_m *DisallowListCache) DisallowFor(peerID peer.ID, cause network.DisallowListedCause) ([]network.DisallowListedCause, error) {
	ret := _m.Called(peerID, cause)

	var r0 []network.DisallowListedCause
	var r1 error
	if rf, ok := ret.Get(0).(func(peer.ID, network.DisallowListedCause) ([]network.DisallowListedCause, error)); ok {
		return rf(peerID, cause)
	}
	if rf, ok := ret.Get(0).(func(peer.ID, network.DisallowListedCause) []network.DisallowListedCause); ok {
		r0 = rf(peerID, cause)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.DisallowListedCause)
		}
	}

	if rf, ok := ret.Get(1).(func(peer.ID, network.DisallowListedCause) error); ok {
		r1 = rf(peerID, cause)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllDisallowedListCausesFor provides a mock function with given fields: peerID
func (_m *DisallowListCache) GetAllDisallowedListCausesFor(peerID peer.ID) []network.DisallowListedCause {
	ret := _m.Called(peerID)

	var r0 []network.DisallowListedCause
	if rf, ok := ret.Get(0).(func(peer.ID) []network.DisallowListedCause); ok {
		r0 = rf(peerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.DisallowListedCause)
		}
	}

	return r0
}

type mockConstructorTestingTNewDisallowListCache interface {
	mock.TestingT
	Cleanup(func())
}

// NewDisallowListCache creates a new instance of DisallowListCache. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewDisallowListCache(t mockConstructorTestingTNewDisallowListCache) *DisallowListCache {
	mock := &DisallowListCache{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
