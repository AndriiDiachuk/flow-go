// Code generated by capnpc-go. DO NOT EDIT.

package captain

import (
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type Message struct{ capnp.Struct }
type Message_Which uint16

const (
	Message_Which_auth                 Message_Which = 0
	Message_Which_ping                 Message_Which = 1
	Message_Which_pong                 Message_Which = 2
	Message_Which_announce             Message_Which = 3
	Message_Which_request              Message_Which = 4
	Message_Which_response             Message_Which = 5
	Message_Which_guaranteedCollection Message_Which = 6
	Message_Which_blockProposal        Message_Which = 7
	Message_Which_blockVote            Message_Which = 8
	Message_Which_blockCommit          Message_Which = 9
)

func (w Message_Which) String() string {
	const s = "authpingpongannouncerequestresponseguaranteedCollectionblockProposalblockVoteblockCommit"
	switch w {
	case Message_Which_auth:
		return s[0:4]
	case Message_Which_ping:
		return s[4:8]
	case Message_Which_pong:
		return s[8:12]
	case Message_Which_announce:
		return s[12:20]
	case Message_Which_request:
		return s[20:27]
	case Message_Which_response:
		return s[27:35]
	case Message_Which_guaranteedCollection:
		return s[35:55]
	case Message_Which_blockProposal:
		return s[55:68]
	case Message_Which_blockVote:
		return s[68:77]
	case Message_Which_blockCommit:
		return s[77:88]

	}
	return "Message_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// Message_TypeID is the unique identifier for the type Message.
const Message_TypeID = 0xaf7a8da44e30bf62

func NewMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message{st}, err
}

func NewRootMessage(s *capnp.Segment) (Message, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return Message{st}, err
}

func ReadRootMessage(msg *capnp.Message) (Message, error) {
	root, err := msg.RootPtr()
	return Message{root.Struct()}, err
}

func (s Message) String() string {
	str, _ := text.Marshal(0xaf7a8da44e30bf62, s.Struct)
	return str
}

func (s Message) Which() Message_Which {
	return Message_Which(s.Struct.Uint16(0))
}
func (s Message) Auth() (Auth, error) {
	if s.Struct.Uint16(0) != 0 {
		panic("Which() != auth")
	}
	p, err := s.Struct.Ptr(0)
	return Auth{Struct: p.Struct()}, err
}

func (s Message) HasAuth() bool {
	if s.Struct.Uint16(0) != 0 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetAuth(v Auth) error {
	s.Struct.SetUint16(0, 0)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAuth sets the auth field to a newly
// allocated Auth struct, preferring placement in s's segment.
func (s Message) NewAuth() (Auth, error) {
	s.Struct.SetUint16(0, 0)
	ss, err := NewAuth(s.Struct.Segment())
	if err != nil {
		return Auth{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Ping() (Ping, error) {
	if s.Struct.Uint16(0) != 1 {
		panic("Which() != ping")
	}
	p, err := s.Struct.Ptr(0)
	return Ping{Struct: p.Struct()}, err
}

func (s Message) HasPing() bool {
	if s.Struct.Uint16(0) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetPing(v Ping) error {
	s.Struct.SetUint16(0, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPing sets the ping field to a newly
// allocated Ping struct, preferring placement in s's segment.
func (s Message) NewPing() (Ping, error) {
	s.Struct.SetUint16(0, 1)
	ss, err := NewPing(s.Struct.Segment())
	if err != nil {
		return Ping{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Pong() (Pong, error) {
	if s.Struct.Uint16(0) != 2 {
		panic("Which() != pong")
	}
	p, err := s.Struct.Ptr(0)
	return Pong{Struct: p.Struct()}, err
}

func (s Message) HasPong() bool {
	if s.Struct.Uint16(0) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetPong(v Pong) error {
	s.Struct.SetUint16(0, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPong sets the pong field to a newly
// allocated Pong struct, preferring placement in s's segment.
func (s Message) NewPong() (Pong, error) {
	s.Struct.SetUint16(0, 2)
	ss, err := NewPong(s.Struct.Segment())
	if err != nil {
		return Pong{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Announce() (Announce, error) {
	if s.Struct.Uint16(0) != 3 {
		panic("Which() != announce")
	}
	p, err := s.Struct.Ptr(0)
	return Announce{Struct: p.Struct()}, err
}

func (s Message) HasAnnounce() bool {
	if s.Struct.Uint16(0) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetAnnounce(v Announce) error {
	s.Struct.SetUint16(0, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAnnounce sets the announce field to a newly
// allocated Announce struct, preferring placement in s's segment.
func (s Message) NewAnnounce() (Announce, error) {
	s.Struct.SetUint16(0, 3)
	ss, err := NewAnnounce(s.Struct.Segment())
	if err != nil {
		return Announce{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Request() (Request, error) {
	if s.Struct.Uint16(0) != 4 {
		panic("Which() != request")
	}
	p, err := s.Struct.Ptr(0)
	return Request{Struct: p.Struct()}, err
}

func (s Message) HasRequest() bool {
	if s.Struct.Uint16(0) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetRequest(v Request) error {
	s.Struct.SetUint16(0, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRequest sets the request field to a newly
// allocated Request struct, preferring placement in s's segment.
func (s Message) NewRequest() (Request, error) {
	s.Struct.SetUint16(0, 4)
	ss, err := NewRequest(s.Struct.Segment())
	if err != nil {
		return Request{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) Response() (Response, error) {
	if s.Struct.Uint16(0) != 5 {
		panic("Which() != response")
	}
	p, err := s.Struct.Ptr(0)
	return Response{Struct: p.Struct()}, err
}

func (s Message) HasResponse() bool {
	if s.Struct.Uint16(0) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetResponse(v Response) error {
	s.Struct.SetUint16(0, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewResponse sets the response field to a newly
// allocated Response struct, preferring placement in s's segment.
func (s Message) NewResponse() (Response, error) {
	s.Struct.SetUint16(0, 5)
	ss, err := NewResponse(s.Struct.Segment())
	if err != nil {
		return Response{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) GuaranteedCollection() (GuaranteedCollection, error) {
	if s.Struct.Uint16(0) != 6 {
		panic("Which() != guaranteedCollection")
	}
	p, err := s.Struct.Ptr(0)
	return GuaranteedCollection{Struct: p.Struct()}, err
}

func (s Message) HasGuaranteedCollection() bool {
	if s.Struct.Uint16(0) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetGuaranteedCollection(v GuaranteedCollection) error {
	s.Struct.SetUint16(0, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewGuaranteedCollection sets the guaranteedCollection field to a newly
// allocated GuaranteedCollection struct, preferring placement in s's segment.
func (s Message) NewGuaranteedCollection() (GuaranteedCollection, error) {
	s.Struct.SetUint16(0, 6)
	ss, err := NewGuaranteedCollection(s.Struct.Segment())
	if err != nil {
		return GuaranteedCollection{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) BlockProposal() (BlockProposal, error) {
	if s.Struct.Uint16(0) != 7 {
		panic("Which() != blockProposal")
	}
	p, err := s.Struct.Ptr(0)
	return BlockProposal{Struct: p.Struct()}, err
}

func (s Message) HasBlockProposal() bool {
	if s.Struct.Uint16(0) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetBlockProposal(v BlockProposal) error {
	s.Struct.SetUint16(0, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockProposal sets the blockProposal field to a newly
// allocated BlockProposal struct, preferring placement in s's segment.
func (s Message) NewBlockProposal() (BlockProposal, error) {
	s.Struct.SetUint16(0, 7)
	ss, err := NewBlockProposal(s.Struct.Segment())
	if err != nil {
		return BlockProposal{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) BlockVote() (BlockVote, error) {
	if s.Struct.Uint16(0) != 8 {
		panic("Which() != blockVote")
	}
	p, err := s.Struct.Ptr(0)
	return BlockVote{Struct: p.Struct()}, err
}

func (s Message) HasBlockVote() bool {
	if s.Struct.Uint16(0) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetBlockVote(v BlockVote) error {
	s.Struct.SetUint16(0, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockVote sets the blockVote field to a newly
// allocated BlockVote struct, preferring placement in s's segment.
func (s Message) NewBlockVote() (BlockVote, error) {
	s.Struct.SetUint16(0, 8)
	ss, err := NewBlockVote(s.Struct.Segment())
	if err != nil {
		return BlockVote{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s Message) BlockCommit() (BlockCommit, error) {
	if s.Struct.Uint16(0) != 9 {
		panic("Which() != blockCommit")
	}
	p, err := s.Struct.Ptr(0)
	return BlockCommit{Struct: p.Struct()}, err
}

func (s Message) HasBlockCommit() bool {
	if s.Struct.Uint16(0) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s Message) SetBlockCommit(v BlockCommit) error {
	s.Struct.SetUint16(0, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewBlockCommit sets the blockCommit field to a newly
// allocated BlockCommit struct, preferring placement in s's segment.
func (s Message) NewBlockCommit() (BlockCommit, error) {
	s.Struct.SetUint16(0, 9)
	ss, err := NewBlockCommit(s.Struct.Segment())
	if err != nil {
		return BlockCommit{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// Message_List is a list of Message.
type Message_List struct{ capnp.List }

// NewMessage creates a new list of Message.
func NewMessage_List(s *capnp.Segment, sz int32) (Message_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return Message_List{l}, err
}

func (s Message_List) At(i int) Message { return Message{s.List.Struct(i)} }

func (s Message_List) Set(i int, v Message) error { return s.List.SetStruct(i, v.Struct) }

func (s Message_List) String() string {
	str, _ := text.MarshalList(0xaf7a8da44e30bf62, s.List)
	return str
}

// Message_Promise is a wrapper for a Message promised by a client call.
type Message_Promise struct{ *capnp.Pipeline }

func (p Message_Promise) Struct() (Message, error) {
	s, err := p.Pipeline.Struct()
	return Message{s}, err
}

func (p Message_Promise) Auth() Auth_Promise {
	return Auth_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Ping() Ping_Promise {
	return Ping_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Pong() Pong_Promise {
	return Pong_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Announce() Announce_Promise {
	return Announce_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Request() Request_Promise {
	return Request_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) Response() Response_Promise {
	return Response_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) GuaranteedCollection() GuaranteedCollection_Promise {
	return GuaranteedCollection_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) BlockProposal() BlockProposal_Promise {
	return BlockProposal_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) BlockVote() BlockVote_Promise {
	return BlockVote_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p Message_Promise) BlockCommit() BlockCommit_Promise {
	return BlockCommit_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

const schema_cc8ede639915bf22 = "x\xdaT\xceKh\x13Q\x18\x05\xe0\xf3\xcfL2\x8d" +
	"\xb4d\xca\xdcBE\x82U4j)m\xa5\x16\xdf\x10" +
	"\xac\x15\x11+\x89#\xe2B\x94\xc9xIC\x92\xb9c" +
	"f\xb2\x11D\xe86(\xba\x10Q\xbb\xac\x08\x85\x12\x04" +
	"W\x82\x84\x80 \xf8X\xb8\x13\x17Z\x17\xa2\x82\x0bA" +
	"\xb0\xbe\xea\x95\x1b\x12\xd1\xe5\x7f\xbes\xe0\x1f\xbfE\x19" +
	"m{\xec\x86\x09\xe4N\xc5\xe22\xdf\x1c?\xb6p\xf9" +
	"B\x03\xb9\x14\x91\xdc\xd8\x1c\xb8\xe9\xbd\xbe\xf2\x0c\xd3d" +
	"\xae\x01&\xee\xe9\xc3d\xb7t\x13\x98x\xa8\xef\xd4\xf0" +
	"A\x86\xde,\xaf\xb8c\x9e\xee\x06\x91[\xf4\xc7*<" +
	"\x0c\xdd\x02\x1f\xf5\xdc\xc0\x0f\xf6\xcc\xf00\xa9\xce,Q" +
	"n\xabn\xf4Ji\x10`'h\x18p\x0c\xd2\xc9\xb1" +
	"H\xa3>\xfa-\x19)\xe8kC\x8f\x02\xa6@[\x95" +
	"\x8c4\xc0\xeeoC\xaf\x82A\x05\xfa/\xc9H\x07\xec" +
	"\x01:\x028L\xc1\x90\x02\xe3\xa7dd\x00v\x8a\x0e" +
	"\x00\xce\xa0\x82M\x0ab?$\xa3\x18`oh/\x86" +
	"\x14\x8c(\x88\x7f\x97\x8c\xe2\x80\xbd\x8d\x16\x01gD\xc1" +
	".\x05\xe67\xc9\xc8\x04\xecI\xaa\x02\xce\x0e\x05\x19\x05" +
	"=+\x92Q\x0f`\xef\xa7\xe3\x80\xb3O\xc1a\x05\x89" +
	"\xaf\x92Q\x02\xb0\xa7)\x0f8\x07\x15dI\xa3\xa4[" +
	"\x8bf\xc9\x92[\x1aO\xcd\xf7+\xcf_\x02D\x16(" +
	"\x19\x14\xfd\x02Yr\xee\xc9Z#svo\xfdo," +
	"\xdaq\x7f\xfaKBR\xbc\xd5\x89\xa5\xeb\xfb\xa2\xe6{" +
	"\x1c\x00Y2\xd5\xa8\xb7\xea\xbc\xf4\xaa\xa3\x97\xaa\xfc|" +
	"\x8d\x87\x11Y\xf2\xe3\xdb\xa33\x9f\x9b\xe9w\xdd]\x95" +
	"\x87\x81\xf0\xc3\xcen\xdd\xf2\x9b\xc7\x93\x9b\xc5rW\x0b" +
	"5\xb7\xea\xfa\x11'~nJ\x94\xcb\xdcKFE\xe1" +
	"\xab\xe2\xbc1\xb7\xb4x\xe6Q\xb7\x98/\x0b\xaf\x94\xad" +
	"\x0a\xac\x0fD\xe8\x96\xc9\x92\xa3w\xef\x7f:t\xba4" +
	"\xff_\xe3\xa4\x88@\x9c\xac\xd5\x85\xc1\x07\x17\xaf/]" +
	"\xfd\xd7\xa6D\x05f\xa5\xa8\x9e\xbc\x9d\xde}\xe2\xc55" +
	"\xba\xd3\xd9\xfe\x09\x00\x00\xff\xffJ\x0e\xa4\x06"

func init() {
	schemas.Register(schema_cc8ede639915bf22,
		0xaf7a8da44e30bf62)
}
