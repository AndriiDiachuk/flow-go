// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"

	transaction "github.com/onflow/flow-go/storage/badger/transaction"
)

// StateMutator is an autogenerated mock type for the StateMutator type
type StateMutator struct {
	mock.Mock
}

// CommitProtocolState provides a mock function with given fields: updater
func (_m *StateMutator) CommitProtocolState(updater protocol.StateUpdater) func(*transaction.Tx) error {
	ret := _m.Called(updater)

	var r0 func(*transaction.Tx) error
	if rf, ok := ret.Get(0).(func(protocol.StateUpdater) func(*transaction.Tx) error); ok {
		r0 = rf(updater)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(*transaction.Tx) error)
		}
	}

	return r0
}

// CreateUpdater provides a mock function with given fields: candidate
func (_m *StateMutator) CreateUpdater(candidate *flow.Header) (protocol.StateUpdater, error) {
	ret := _m.Called(candidate)

	var r0 protocol.StateUpdater
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.Header) (protocol.StateUpdater, error)); ok {
		return rf(candidate)
	}
	if rf, ok := ret.Get(0).(func(*flow.Header) protocol.StateUpdater); ok {
		r0 = rf(candidate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol.StateUpdater)
		}
	}

	if rf, ok := ret.Get(1).(func(*flow.Header) error); ok {
		r1 = rf(candidate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewStateMutator interface {
	mock.TestingT
	Cleanup(func())
}

// NewStateMutator creates a new instance of StateMutator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStateMutator(t mockConstructorTestingTNewStateMutator) *StateMutator {
	mock := &StateMutator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
