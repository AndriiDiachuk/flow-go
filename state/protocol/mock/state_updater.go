// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"
)

// StateUpdater is an autogenerated mock type for the StateUpdater type
type StateUpdater struct {
	mock.Mock
}

// Block provides a mock function with given fields:
func (_m *StateUpdater) Block() *flow.Header {
	ret := _m.Called()

	var r0 *flow.Header
	if rf, ok := ret.Get(0).(func() *flow.Header); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.Header)
		}
	}

	return r0
}

// Build provides a mock function with given fields:
func (_m *StateUpdater) Build() (*flow.ProtocolStateEntry, flow.Identifier, bool) {
	ret := _m.Called()

	var r0 *flow.ProtocolStateEntry
	var r1 flow.Identifier
	var r2 bool
	if rf, ok := ret.Get(0).(func() (*flow.ProtocolStateEntry, flow.Identifier, bool)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *flow.ProtocolStateEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.ProtocolStateEntry)
		}
	}

	if rf, ok := ret.Get(1).(func() flow.Identifier); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(flow.Identifier)
		}
	}

	if rf, ok := ret.Get(2).(func() bool); ok {
		r2 = rf()
	} else {
		r2 = ret.Get(2).(bool)
	}

	return r0, r1, r2
}

// ParentState provides a mock function with given fields:
func (_m *StateUpdater) ParentState() *flow.RichProtocolStateEntry {
	ret := _m.Called()

	var r0 *flow.RichProtocolStateEntry
	if rf, ok := ret.Get(0).(func() *flow.RichProtocolStateEntry); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*flow.RichProtocolStateEntry)
		}
	}

	return r0
}

// ProcessEpochCommit provides a mock function with given fields: epochCommit
func (_m *StateUpdater) ProcessEpochCommit(epochCommit *flow.EpochCommit) error {
	ret := _m.Called(epochCommit)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.EpochCommit) error); ok {
		r0 = rf(epochCommit)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ProcessEpochSetup provides a mock function with given fields: epochSetup
func (_m *StateUpdater) ProcessEpochSetup(epochSetup *flow.EpochSetup) error {
	ret := _m.Called(epochSetup)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.EpochSetup) error); ok {
		r0 = rf(epochSetup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetInvalidStateTransitionAttempted provides a mock function with given fields:
func (_m *StateUpdater) SetInvalidStateTransitionAttempted() {
	_m.Called()
}

// TransitionToNextEpoch provides a mock function with given fields:
func (_m *StateUpdater) TransitionToNextEpoch() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateIdentity provides a mock function with given fields: updated
func (_m *StateUpdater) UpdateIdentity(updated *flow.DynamicIdentityEntry) error {
	ret := _m.Called(updated)

	var r0 error
	if rf, ok := ret.Get(0).(func(*flow.DynamicIdentityEntry) error); ok {
		r0 = rf(updated)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewStateUpdater interface {
	mock.TestingT
	Cleanup(func())
}

// NewStateUpdater creates a new instance of StateUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStateUpdater(t mockConstructorTestingTNewStateUpdater) *StateUpdater {
	mock := &StateUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
