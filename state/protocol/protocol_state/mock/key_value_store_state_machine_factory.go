// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol_state "github.com/onflow/flow-go/state/protocol/protocol_state"
)

// KeyValueStoreStateMachineFactory is an autogenerated mock type for the KeyValueStoreStateMachineFactory type
type KeyValueStoreStateMachineFactory struct {
	mock.Mock
}

// Create provides a mock function with given fields: candidate, parentState, mutator
func (_m *KeyValueStoreStateMachineFactory) Create(candidate *flow.Header, parentState protocol_state.KVStoreReader, mutator protocol_state.KVStoreMutator) (protocol_state.OrthogonalStoreStateMachine[protocol_state.KVStoreReader], error) {
	ret := _m.Called(candidate, parentState, mutator)

	var r0 protocol_state.OrthogonalStoreStateMachine[protocol_state.KVStoreReader]
	var r1 error
	if rf, ok := ret.Get(0).(func(*flow.Header, protocol_state.KVStoreReader, protocol_state.KVStoreMutator) (protocol_state.OrthogonalStoreStateMachine[protocol_state.KVStoreReader], error)); ok {
		return rf(candidate, parentState, mutator)
	}
	if rf, ok := ret.Get(0).(func(*flow.Header, protocol_state.KVStoreReader, protocol_state.KVStoreMutator) protocol_state.OrthogonalStoreStateMachine[protocol_state.KVStoreReader]); ok {
		r0 = rf(candidate, parentState, mutator)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(protocol_state.OrthogonalStoreStateMachine[protocol_state.KVStoreReader])
		}
	}

	if rf, ok := ret.Get(1).(func(*flow.Header, protocol_state.KVStoreReader, protocol_state.KVStoreMutator) error); ok {
		r1 = rf(candidate, parentState, mutator)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewKeyValueStoreStateMachineFactory interface {
	mock.TestingT
	Cleanup(func())
}

// NewKeyValueStoreStateMachineFactory creates a new instance of KeyValueStoreStateMachineFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewKeyValueStoreStateMachineFactory(t mockConstructorTestingTNewKeyValueStoreStateMachineFactory) *KeyValueStoreStateMachineFactory {
	mock := &KeyValueStoreStateMachineFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
