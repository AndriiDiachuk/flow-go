// Code generated by mockery v2.21.4. DO NOT EDIT.

package mock

import (
	flow "github.com/onflow/flow-go/model/flow"
	mock "github.com/stretchr/testify/mock"

	protocol "github.com/onflow/flow-go/state/protocol"
)

// OrthogonalStoreStateMachine is an autogenerated mock type for the OrthogonalStoreStateMachine type
type OrthogonalStoreStateMachine[P interface{}] struct {
	mock.Mock
}

// Build provides a mock function with given fields:
func (_m *OrthogonalStoreStateMachine[P]) Build() protocol.DeferredDBUpdates {
	ret := _m.Called()

	var r0 protocol.DeferredDBUpdates
	if rf, ok := ret.Get(0).(func() protocol.DeferredDBUpdates); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(protocol.DeferredDBUpdates)
	}

	return r0
}

// ParentState provides a mock function with given fields:
func (_m *OrthogonalStoreStateMachine[P]) ParentState() P {
	ret := _m.Called()

	var r0 P
	if rf, ok := ret.Get(0).(func() P); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(P)
	}

	return r0
}

// ProcessUpdate provides a mock function with given fields: orderedUpdates
func (_m *OrthogonalStoreStateMachine[P]) ProcessUpdate(orderedUpdates []flow.ServiceEvent) error {
	ret := _m.Called(orderedUpdates)

	var r0 error
	if rf, ok := ret.Get(0).(func([]flow.ServiceEvent) error); ok {
		r0 = rf(orderedUpdates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// View provides a mock function with given fields:
func (_m *OrthogonalStoreStateMachine[P]) View() uint64 {
	ret := _m.Called()

	var r0 uint64
	if rf, ok := ret.Get(0).(func() uint64); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint64)
	}

	return r0
}

type mockConstructorTestingTNewOrthogonalStoreStateMachine interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrthogonalStoreStateMachine creates a new instance of OrthogonalStoreStateMachine. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrthogonalStoreStateMachine[P interface{}](t mockConstructorTestingTNewOrthogonalStoreStateMachine) *OrthogonalStoreStateMachine[P] {
	mock := &OrthogonalStoreStateMachine[P]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
